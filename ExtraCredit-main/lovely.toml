
[manifest]
version = "1.0.0"
dump_lua = true
priority = 0




#Negative bonus chips UI
[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''
bonus_chips = (self.ability.bonus + (self.ability.perma_bonus or 0)) > 0 and (self.ability.bonus + (self.ability.perma_bonus or 0)) or nil,
'''
position = 'at'
match_indent = true
payload = '''
bonus_chips = (self.ability.bonus + (self.ability.perma_bonus or 0)) ~= 0 and (self.ability.bonus + (self.ability.perma_bonus or 0)) or nil,
'''




#Burglar instant for Bobby compat
[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''
ease_discard(-G.GAME.current_round.discards_left, nil, true)
'''
position = 'at'
payload = '''
ease_discard(-G.GAME.current_round.discards_left, true, true)
'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''
ease_hands_played(self.ability.extra)
'''
position = 'at'
payload = '''
ease_hands_played(self.ability.extra, true)
'''
match_indent = true



#Debuff functionality
[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''
if self.ability.perishable and self.ability.perish_tally <= 0 then 
    if not self.debuff then
        self.debuff = true
        if self.area == G.jokers then self:remove_from_deck(true) end
    end
    return
end
'''
position = 'after'
payload = '''
if next(find_joker("Permanent Marker")) and self.ability.set == "Enhanced" then should_debuff = false end
'''
match_indent = true


#Tuxedo, Farmer, and Go Fish resets
[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = '''
reset_idol_card()
'''
position = 'after'
payload = '''
reset_tuxedo_card()
reset_farmer_card()
reset_fish_rank()
'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'game.lua'
pattern = '''
reset_idol_card()
reset_mail_rank()
self.GAME.current_round.ancient_card.suit = nil
reset_ancient_card()
'''
position = 'after'
payload = '''
self.GAME.current_round.tuxedo_card.suit = nil
reset_tuxedo_card()
self.GAME.current_round.farmer_card.suit = nil
reset_farmer_card()
self.GAME.current_round.fish_rank.suit = nil
reset_fish_rank()
'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'game.lua'
pattern = '''
idol_card = {suit = 'Spades', rank = 'Ace'},
mail_card = {rank = 'Ace'},
ancient_card = {suit = 'Spades'},
'''
position = 'after'
payload = '''
tuxedo_card = {suit = 'Spades'},
farmer_card = {suit = 'Spades'},
fish_rank = {rank = 'Ace'},
'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = '''
if valid_castle_cards[1] then 
        local castle_card = pseudorandom_element(valid_castle_cards, pseudoseed('cas'..G.GAME.round_resets.ante))
        G.GAME.current_round.castle_card.suit = castle_card.base.suit
    end
end
'''
position = 'after'
payload = '''

function reset_tuxedo_card()
    local tuxedo_suits = {}
    for k, v in ipairs({'Spades','Hearts','Clubs','Diamonds'}) do
        if v ~= G.GAME.current_round.tuxedo_card.suit then tuxedo_suits[#tuxedo_suits + 1] = v end
    end
    local tuxedo_card = pseudorandom_element(tuxedo_suits, pseudoseed('tux'..G.GAME.round_resets.ante))
    G.GAME.current_round.tuxedo_card.suit = tuxedo_card
end

function reset_farmer_card()
    local farmer_suits = {}
    for k, v in ipairs({'Spades','Hearts','Clubs','Diamonds'}) do
        if v ~= G.GAME.current_round.farmer_card.suit then farmer_suits[#farmer_suits + 1] = v end
    end
    local farmer_card = pseudorandom_element(farmer_suits, pseudoseed('farm'..G.GAME.round_resets.ante))
    G.GAME.current_round.farmer_card.suit = farmer_card
end

function reset_fish_rank()
    local valid_fish_ranks = {}
    for k, v in ipairs({'Ace', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'Jack', 'Queen', 'King'}) do
        if v ~= G.GAME.current_round.fish_rank.rank then
            valid_fish_ranks[#valid_fish_ranks+1] = v
        end
    end
    local fish_pick = pseudorandom_element(valid_fish_ranks, pseudoseed('fish'..G.GAME.round_resets.ante))
    G.GAME.current_round.fish_rank.rank = fish_pick
end

'''
match_indent = true

# New context to modify mult/chips before hands are played - used for Clown Car
[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
match_indent = true
pattern = '''if modded then update_hand_text({sound = 'chips2', modded = modded}, {chips = hand_chips, mult = mult}) end'''
position = 'after'
payload = '''
for i=1, #G.jokers.cards do
    eval_card(G.jokers.cards[i], {cardarea = G.jokers, full_hand = G.play.cards, scoring_hand = scoring_hand, scoring_name = text, poker_hands = poker_hands, before_but_not_as_much = true})
end
'''

# manually check lucky 7 for quantum enhancments
[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
match_indent = true
pattern = '''G.GAME.first_used_hand_level = nil
end'''
position = 'after'
payload = '''
if next(find_joker("Lucky 7")) then
    local thunk = false
    for i=1, #scoring_hand do
        if scoring_hand[i]:get_id() == 7 and not SMODS.has_no_rank(scoring_hand[i]) then
            thunk = true break
        end
    end
    if thunk then
        for i=1, #scoring_hand do
            scoring_hand[i].gambling = true
        end
    end
end
'''